#!/usr/bin/env node

/**
 * Build script to automatically extract app metadata from configuration files
 * This runs without developer intervention and generates app-metadata.ts
 */

const fs = require('fs')
const path = require('path')

function findProjectRoot() {
  let currentDir = process.cwd()

  // Look for package.json going up the directory tree
  while (currentDir !== path.dirname(currentDir)) {
    if (fs.existsSync(path.join(currentDir, 'package.json'))) {
      return currentDir
    }
    currentDir = path.dirname(currentDir)
  }

  return process.cwd()
}

function extractAppMetadata(projectRoot) {
  const metadata = {
    name: undefined,
    version: undefined,
    bundleId: undefined,
    buildNumber: undefined,
    displayName: undefined,
  }

  try {
    // Method 1: Try app.json
    const appJsonPath = path.join(projectRoot, 'app.json')
    if (fs.existsSync(appJsonPath)) {
      const appConfig = JSON.parse(fs.readFileSync(appJsonPath, 'utf8'))

      metadata.name = appConfig.name || appConfig.displayName
      metadata.version = appConfig.version
      metadata.displayName = appConfig.displayName

      // Extract bundle ID from platform-specific configs
      if (appConfig.ios?.bundleIdentifier) {
        metadata.bundleId = appConfig.ios.bundleIdentifier
      } else if (appConfig.android?.package) {
        metadata.bundleId = appConfig.android.package
      }

      if (appConfig.ios?.buildNumber) {
        metadata.buildNumber = appConfig.ios.buildNumber.toString()
      } else if (appConfig.android?.versionCode) {
        metadata.buildNumber = appConfig.android.versionCode.toString()
      }

      console.log('✅ Extracted metadata from app.json')
      return metadata
    }

    // Method 2: Try app.config.js
    const appConfigJsPath = path.join(projectRoot, 'app.config.js')
    if (fs.existsSync(appConfigJsPath)) {
      try {
        // Clear require cache to get fresh config
        delete require.cache[require.resolve(appConfigJsPath)]
        const appConfig = require(appConfigJsPath)

        metadata.name = appConfig.name || appConfig.displayName
        metadata.version = appConfig.version
        metadata.displayName = appConfig.displayName

        // Extract bundle ID from platform-specific configs
        if (appConfig.ios?.bundleIdentifier) {
          metadata.bundleId = appConfig.ios.bundleIdentifier
        } else if (appConfig.android?.package) {
          metadata.bundleId = appConfig.android.package
        }

        if (appConfig.ios?.buildNumber) {
          metadata.buildNumber = appConfig.ios.buildNumber.toString()
        } else if (appConfig.android?.versionCode) {
          metadata.buildNumber = appConfig.android.versionCode.toString()
        }

        console.log('✅ Extracted metadata from app.config.js')
        return metadata
      } catch (error) {
        console.warn('⚠️ Could not parse app.config.js:', error.message)
      }
    }

    // Method 3: Fallback to package.json
    const packageJsonPath = path.join(projectRoot, 'package.json')
    if (fs.existsSync(packageJsonPath)) {
      const packageConfig = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'))

      metadata.name = packageConfig.name
      metadata.version = packageConfig.version

      console.log('✅ Extracted metadata from package.json')
      return metadata
    }

  } catch (error) {
    console.warn('⚠️ Error extracting app metadata:', error.message)
  }

  return metadata
}

function generateAppMetadataFile(metadata, outputPath) {
  const content = `/**
 * Auto-generated app metadata
 * This file is generated at build time to provide app metadata without developer intervention
 */

// This file is automatically generated by the build process
// It extracts metadata from app.json, app.config.js, or package.json

export interface AppMetadata {
  name?: string
  version?: string
  bundleId?: string
  buildNumber?: string
  displayName?: string
}

// Auto-detected values from project configuration files
export const APP_METADATA: AppMetadata = {
  name: ${metadata.name ? `'${metadata.name}'` : 'undefined'},
  version: ${metadata.version ? `'${metadata.version}'` : 'undefined'},
  bundleId: ${metadata.bundleId ? `'${metadata.bundleId}'` : 'undefined'},
  buildNumber: ${metadata.buildNumber ? `'${metadata.buildNumber}'` : 'undefined'},
  displayName: ${metadata.displayName ? `'${metadata.displayName}'` : 'undefined'},
}

/**
 * Get auto-detected app metadata
 */
export function getAutoDetectedAppMetadata(): AppMetadata {
  return { ...APP_METADATA }
}
`

  fs.writeFileSync(outputPath, content, 'utf8')
  console.log(`✅ Generated app-metadata.ts`)
}

function main() {
  const projectRoot = findProjectRoot()
  console.log(`🔍 Looking for app metadata in: ${projectRoot}`)

  const metadata = extractAppMetadata(projectRoot)

  // Show what was detected
  console.log('📋 Detected metadata:')
  Object.entries(metadata).forEach(([key, value]) => {
    if (value) {
      console.log(`  ${key}: ${value}`)
    }
  })

  // Generate the TypeScript file
  const outputPath = path.join(__dirname, '../src/utils/app-metadata.ts')
  generateAppMetadataFile(metadata, outputPath)
}

if (require.main === module) {
  main()
}

module.exports = { extractAppMetadata, generateAppMetadataFile }
