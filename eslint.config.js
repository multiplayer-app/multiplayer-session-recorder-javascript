import js from '@eslint/js'
import tseslint from '@typescript-eslint/eslint-plugin'
import tsparser from '@typescript-eslint/parser'

export default [
  js.configs.recommended,
  {
    ignores: [
      'node_modules/**',
      'dist/**',
      'build/**',
      'coverage/**',
      '*.min.js',
      '*.bundle.js',
    ],
  },
  {
    files: ['**/*.ts', '**/*.tsx'],
    languageOptions: {
      parser: tsparser,
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
      },
      globals: {
        // Browser globals
        window: 'readonly',
        document: 'readonly',
        navigator: 'readonly',
        localStorage: 'readonly',
        sessionStorage: 'readonly',
        console: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        requestAnimationFrame: 'readonly',
        cancelAnimationFrame: 'readonly',
        fetch: 'readonly',
        Headers: 'readonly',
        HeadersInit: 'readonly',
        Request: 'readonly',
        RequestInfo: 'readonly',
        Response: 'readonly',
        FormData: 'readonly',
        File: 'readonly',
        Blob: 'readonly',
        URL: 'readonly',
        URLSearchParams: 'readonly',
        AbortController: 'readonly',
        AbortSignal: 'readonly',
        ReadableStream: 'readonly',
        WritableStream: 'readonly',
        TransformStream: 'readonly',
        TextEncoder: 'readonly',
        TextDecoder: 'readonly',
        HTMLElement: 'readonly',
        HTMLButtonElement: 'readonly',
        HTMLInputElement: 'readonly',
        HTMLTextAreaElement: 'readonly',
        HTMLAnchorElement: 'readonly',
        XMLHttpRequest: 'readonly',
        XMLHttpRequestBodyInit: 'readonly',
        MouseEvent: 'readonly',
        InputEvent: 'readonly',
        MessageEvent: 'readonly',
        EventListener: 'readonly',
        MutationObserver: 'readonly',
        NodeJS: 'readonly',
        Window: 'readonly',
        Document: 'readonly',
        IDBDatabase: 'readonly',
        indexedDB: 'readonly',
        // Node.js globals
        process: 'readonly',
        Buffer: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        global: 'readonly',
        module: 'readonly',
        require: 'readonly',
        exports: 'readonly',
      },
    },
    plugins: {
      '@typescript-eslint': tseslint,
    },
    rules: {
      // TypeScript specific rules
      'no-namespace': 'off',
      'no-useless-escape': 'off',
      'no-self-assign': 'off',
      'no-useless-catch': 'off',
      'prefer-namespace-keyword': 'off',
      'no-empty-function': 'off',
      'no-unused-vars': 'off',
      'no-explicit-any': 'off',
      'ban-types': 'off',
      'object-curly-spacing': ['error', 'always'],
      'space-before-blocks': 'error',
      'keyword-spacing': 'error',

      // General rules
      'prefer-const': 'error',
      'block-spacing': ['error', 'always'],
      'keyword-spacing': [
        'error',
        {
          before: true,
          after: true,
        },
      ],
      'indent': ['error', 2, { SwitchCase: 1 }],
      'linebreak-style': ['error', 'unix'],
      'quotes': ['error', 'single'],
      'semi': ['error', 'never'],
      'comma-dangle': ['error', 'always-multiline'],
      'no-console': 'warn',
      'object-curly-spacing': ['error', 'always'],
      'space-in-parens': ['error', 'never'],
      'array-bracket-spacing': ['error', 'never'],
      'no-trailing-spaces': 'error',
      'no-multi-spaces': 'error',
      'no-lonely-if': 'error',
      'key-spacing': 'error',
      'no-useless-escape': 'error',
      'no-self-assign': 'error',
    },
  },
  {
    files: ['**/*.js', '**/*.mjs'],
    languageOptions: {
      ecmaVersion: 'latest',
      sourceType: 'module',
      globals: {
        // Browser globals
        window: 'readonly',
        document: 'readonly',
        navigator: 'readonly',
        localStorage: 'readonly',
        sessionStorage: 'readonly',
        console: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        requestAnimationFrame: 'readonly',
        cancelAnimationFrame: 'readonly',
        fetch: 'readonly',
        Headers: 'readonly',
        HeadersInit: 'readonly',
        Request: 'readonly',
        RequestInfo: 'readonly',
        Response: 'readonly',
        FormData: 'readonly',
        File: 'readonly',
        Blob: 'readonly',
        URL: 'readonly',
        URLSearchParams: 'readonly',
        AbortController: 'readonly',
        AbortSignal: 'readonly',
        ReadableStream: 'readonly',
        WritableStream: 'readonly',
        TransformStream: 'readonly',
        TextEncoder: 'readonly',
        TextDecoder: 'readonly',
        HTMLElement: 'readonly',
        HTMLButtonElement: 'readonly',
        HTMLInputElement: 'readonly',
        HTMLTextAreaElement: 'readonly',
        HTMLAnchorElement: 'readonly',
        XMLHttpRequest: 'readonly',
        XMLHttpRequestBodyInit: 'readonly',
        MouseEvent: 'readonly',
        InputEvent: 'readonly',
        MessageEvent: 'readonly',
        EventListener: 'readonly',
        MutationObserver: 'readonly',
        NodeJS: 'readonly',
        Window: 'readonly',
        Document: 'readonly',
        IDBDatabase: 'readonly',
        indexedDB: 'readonly',
        // Node.js globals
        process: 'readonly',
        Buffer: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        global: 'readonly',
        module: 'readonly',
        require: 'readonly',
        exports: 'readonly',
      },
    },
    rules: {
      'no-useless-escape': 'off',
      'no-self-assign': 'off',
      'prefer-const': 'error',
      'block-spacing': ['error', 'always'],
      'keyword-spacing': [
        'error',
        {
          before: true,
          after: true,
        },
      ],
      'indent': ['error', 2, { SwitchCase: 1 }],
      'linebreak-style': ['error', 'unix'],
      'quotes': ['error', 'single'],
      'semi': ['error', 'never'],
      'comma-dangle': ['error', 'always-multiline'],
      'no-console': 'warn',
      'object-curly-spacing': ['error', 'always'],
      'space-in-parens': ['error', 'never'],
      'array-bracket-spacing': ['error', 'never'],
      'no-trailing-spaces': 'error',
      'no-multi-spaces': 'error',
      'no-lonely-if': 'error',
      'key-spacing': 'error',
      'no-useless-escape': 'error',
      'no-self-assign': 'error',
    },
  },
]
